// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MotionWiimoteSimple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* MotionWiimoteSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionWiimoteSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionWiimoteSimple_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionWiimoteSimple_Entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MotionWiimoteSimple_2eproto() {
  protobuf_AddDesc_MotionWiimoteSimple_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MotionWiimoteSimple.proto");
  GOOGLE_CHECK(file != NULL);
  MotionWiimoteSimple_descriptor_ = file->message_type(0);
  static const int MotionWiimoteSimple_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple, stept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple, minseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple, maxseq_),
  };
  MotionWiimoteSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionWiimoteSimple_descriptor_,
      MotionWiimoteSimple::default_instance_,
      MotionWiimoteSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionWiimoteSimple));
  MotionWiimoteSimple_Entry_descriptor_ = MotionWiimoteSimple_descriptor_->nested_type(0);
  static const int MotionWiimoteSimple_Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple_Entry, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple_Entry, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple_Entry, gyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple_Entry, orien_),
  };
  MotionWiimoteSimple_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionWiimoteSimple_Entry_descriptor_,
      MotionWiimoteSimple_Entry::default_instance_,
      MotionWiimoteSimple_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionWiimoteSimple_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionWiimoteSimple_Entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MotionWiimoteSimple_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionWiimoteSimple_descriptor_, &MotionWiimoteSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionWiimoteSimple_Entry_descriptor_, &MotionWiimoteSimple_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MotionWiimoteSimple_2eproto() {
  delete MotionWiimoteSimple::default_instance_;
  delete MotionWiimoteSimple_reflection_;
  delete MotionWiimoteSimple_Entry::default_instance_;
  delete MotionWiimoteSimple_Entry_reflection_;
}

void protobuf_AddDesc_MotionWiimoteSimple_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_bootes_2fdances_2fproto_2fStage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031MotionWiimoteSimple.proto\022\002pb\032\037bootes/"
    "dances/proto/Stage.proto\"\366\001\n\023MotionWiimo"
    "teSimple\022\r\n\005stept\030\001 \002(\005\022-\n\006minseq\030\002 \003(\0132"
    "\035.pb.MotionWiimoteSimple.Entry\022-\n\006maxseq"
    "\030\003 \003(\0132\035.pb.MotionWiimoteSimple.Entry\032r\n"
    "\005Entry\022\t\n\001t\030\001 \002(\005\022\037\n\005accel\030\002 \002(\0132\020.pb.Mo"
    "tion.Accel\022\035\n\004gyro\030\003 \002(\0132\017.pb.Motion.Gyr"
    "o\022\036\n\005orien\030\004 \002(\0132\017.pb.Motion.Gyro", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MotionWiimoteSimple.proto", &protobuf_RegisterTypes);
  MotionWiimoteSimple::default_instance_ = new MotionWiimoteSimple();
  MotionWiimoteSimple_Entry::default_instance_ = new MotionWiimoteSimple_Entry();
  MotionWiimoteSimple::default_instance_->InitAsDefaultInstance();
  MotionWiimoteSimple_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MotionWiimoteSimple_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MotionWiimoteSimple_2eproto {
  StaticDescriptorInitializer_MotionWiimoteSimple_2eproto() {
    protobuf_AddDesc_MotionWiimoteSimple_2eproto();
  }
} static_descriptor_initializer_MotionWiimoteSimple_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MotionWiimoteSimple_Entry::kTFieldNumber;
const int MotionWiimoteSimple_Entry::kAccelFieldNumber;
const int MotionWiimoteSimple_Entry::kGyroFieldNumber;
const int MotionWiimoteSimple_Entry::kOrienFieldNumber;
#endif  // !_MSC_VER

MotionWiimoteSimple_Entry::MotionWiimoteSimple_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionWiimoteSimple_Entry::InitAsDefaultInstance() {
  accel_ = const_cast< ::pb::Motion_Accel*>(&::pb::Motion_Accel::default_instance());
  gyro_ = const_cast< ::pb::Motion_Gyro*>(&::pb::Motion_Gyro::default_instance());
  orien_ = const_cast< ::pb::Motion_Gyro*>(&::pb::Motion_Gyro::default_instance());
}

MotionWiimoteSimple_Entry::MotionWiimoteSimple_Entry(const MotionWiimoteSimple_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionWiimoteSimple_Entry::SharedCtor() {
  _cached_size_ = 0;
  t_ = 0;
  accel_ = NULL;
  gyro_ = NULL;
  orien_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionWiimoteSimple_Entry::~MotionWiimoteSimple_Entry() {
  SharedDtor();
}

void MotionWiimoteSimple_Entry::SharedDtor() {
  if (this != default_instance_) {
    delete accel_;
    delete gyro_;
    delete orien_;
  }
}

void MotionWiimoteSimple_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionWiimoteSimple_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionWiimoteSimple_Entry_descriptor_;
}

const MotionWiimoteSimple_Entry& MotionWiimoteSimple_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MotionWiimoteSimple_2eproto();  return *default_instance_;
}

MotionWiimoteSimple_Entry* MotionWiimoteSimple_Entry::default_instance_ = NULL;

MotionWiimoteSimple_Entry* MotionWiimoteSimple_Entry::New() const {
  return new MotionWiimoteSimple_Entry;
}

void MotionWiimoteSimple_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ = 0;
    if (has_accel()) {
      if (accel_ != NULL) accel_->::pb::Motion_Accel::Clear();
    }
    if (has_gyro()) {
      if (gyro_ != NULL) gyro_->::pb::Motion_Gyro::Clear();
    }
    if (has_orien()) {
      if (orien_ != NULL) orien_->::pb::Motion_Gyro::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionWiimoteSimple_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 t = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accel;
        break;
      }
      
      // required .pb.Motion.Accel accel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gyro;
        break;
      }
      
      // required .pb.Motion.Gyro gyro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_orien;
        break;
      }
      
      // required .pb.Motion.Gyro orien = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orien:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orien()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionWiimoteSimple_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 t = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->t(), output);
  }
  
  // required .pb.Motion.Accel accel = 2;
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accel(), output);
  }
  
  // required .pb.Motion.Gyro gyro = 3;
  if (has_gyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gyro(), output);
  }
  
  // required .pb.Motion.Gyro orien = 4;
  if (has_orien()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->orien(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionWiimoteSimple_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 t = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->t(), target);
  }
  
  // required .pb.Motion.Accel accel = 2;
  if (has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accel(), target);
  }
  
  // required .pb.Motion.Gyro gyro = 3;
  if (has_gyro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gyro(), target);
  }
  
  // required .pb.Motion.Gyro orien = 4;
  if (has_orien()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->orien(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionWiimoteSimple_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 t = 1;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }
    
    // required .pb.Motion.Accel accel = 2;
    if (has_accel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accel());
    }
    
    // required .pb.Motion.Gyro gyro = 3;
    if (has_gyro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gyro());
    }
    
    // required .pb.Motion.Gyro orien = 4;
    if (has_orien()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orien());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionWiimoteSimple_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionWiimoteSimple_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionWiimoteSimple_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionWiimoteSimple_Entry::MergeFrom(const MotionWiimoteSimple_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_accel()) {
      mutable_accel()->::pb::Motion_Accel::MergeFrom(from.accel());
    }
    if (from.has_gyro()) {
      mutable_gyro()->::pb::Motion_Gyro::MergeFrom(from.gyro());
    }
    if (from.has_orien()) {
      mutable_orien()->::pb::Motion_Gyro::MergeFrom(from.orien());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionWiimoteSimple_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionWiimoteSimple_Entry::CopyFrom(const MotionWiimoteSimple_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionWiimoteSimple_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_accel()) {
    if (!this->accel().IsInitialized()) return false;
  }
  if (has_gyro()) {
    if (!this->gyro().IsInitialized()) return false;
  }
  if (has_orien()) {
    if (!this->orien().IsInitialized()) return false;
  }
  return true;
}

void MotionWiimoteSimple_Entry::Swap(MotionWiimoteSimple_Entry* other) {
  if (other != this) {
    std::swap(t_, other->t_);
    std::swap(accel_, other->accel_);
    std::swap(gyro_, other->gyro_);
    std::swap(orien_, other->orien_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionWiimoteSimple_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionWiimoteSimple_Entry_descriptor_;
  metadata.reflection = MotionWiimoteSimple_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MotionWiimoteSimple::kSteptFieldNumber;
const int MotionWiimoteSimple::kMinseqFieldNumber;
const int MotionWiimoteSimple::kMaxseqFieldNumber;
#endif  // !_MSC_VER

MotionWiimoteSimple::MotionWiimoteSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotionWiimoteSimple::InitAsDefaultInstance() {
}

MotionWiimoteSimple::MotionWiimoteSimple(const MotionWiimoteSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotionWiimoteSimple::SharedCtor() {
  _cached_size_ = 0;
  stept_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionWiimoteSimple::~MotionWiimoteSimple() {
  SharedDtor();
}

void MotionWiimoteSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotionWiimoteSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionWiimoteSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionWiimoteSimple_descriptor_;
}

const MotionWiimoteSimple& MotionWiimoteSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MotionWiimoteSimple_2eproto();  return *default_instance_;
}

MotionWiimoteSimple* MotionWiimoteSimple::default_instance_ = NULL;

MotionWiimoteSimple* MotionWiimoteSimple::New() const {
  return new MotionWiimoteSimple;
}

void MotionWiimoteSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stept_ = 0;
  }
  minseq_.Clear();
  maxseq_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionWiimoteSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stept_)));
          set_has_stept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_minseq;
        break;
      }
      
      // repeated .pb.MotionWiimoteSimple.Entry minseq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_minseq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_minseq;
        if (input->ExpectTag(26)) goto parse_maxseq;
        break;
      }
      
      // repeated .pb.MotionWiimoteSimple.Entry maxseq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maxseq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_maxseq;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotionWiimoteSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stept = 1;
  if (has_stept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stept(), output);
  }
  
  // repeated .pb.MotionWiimoteSimple.Entry minseq = 2;
  for (int i = 0; i < this->minseq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->minseq(i), output);
  }
  
  // repeated .pb.MotionWiimoteSimple.Entry maxseq = 3;
  for (int i = 0; i < this->maxseq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->maxseq(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotionWiimoteSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stept = 1;
  if (has_stept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stept(), target);
  }
  
  // repeated .pb.MotionWiimoteSimple.Entry minseq = 2;
  for (int i = 0; i < this->minseq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->minseq(i), target);
  }
  
  // repeated .pb.MotionWiimoteSimple.Entry maxseq = 3;
  for (int i = 0; i < this->maxseq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->maxseq(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotionWiimoteSimple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stept = 1;
    if (has_stept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stept());
    }
    
  }
  // repeated .pb.MotionWiimoteSimple.Entry minseq = 2;
  total_size += 1 * this->minseq_size();
  for (int i = 0; i < this->minseq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->minseq(i));
  }
  
  // repeated .pb.MotionWiimoteSimple.Entry maxseq = 3;
  total_size += 1 * this->maxseq_size();
  for (int i = 0; i < this->maxseq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maxseq(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionWiimoteSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionWiimoteSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionWiimoteSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionWiimoteSimple::MergeFrom(const MotionWiimoteSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  minseq_.MergeFrom(from.minseq_);
  maxseq_.MergeFrom(from.maxseq_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stept()) {
      set_stept(from.stept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionWiimoteSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionWiimoteSimple::CopyFrom(const MotionWiimoteSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionWiimoteSimple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < minseq_size(); i++) {
    if (!this->minseq(i).IsInitialized()) return false;
  }
  for (int i = 0; i < maxseq_size(); i++) {
    if (!this->maxseq(i).IsInitialized()) return false;
  }
  return true;
}

void MotionWiimoteSimple::Swap(MotionWiimoteSimple* other) {
  if (other != this) {
    std::swap(stept_, other->stept_);
    minseq_.Swap(&other->minseq_);
    maxseq_.Swap(&other->maxseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionWiimoteSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionWiimoteSimple_descriptor_;
  metadata.reflection = MotionWiimoteSimple_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
