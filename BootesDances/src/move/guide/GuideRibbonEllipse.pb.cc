// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuideRibbonEllipse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GuideRibbonEllipse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideRibbonEllipse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuideRibbonEllipse_2eproto() {
  protobuf_AddDesc_GuideRibbonEllipse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuideRibbonEllipse.proto");
  GOOGLE_CHECK(file != NULL);
  GuideRibbonEllipse_descriptor_ = file->message_type(0);
  static const int GuideRibbonEllipse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, angle0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, angle1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, direction_),
  };
  GuideRibbonEllipse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideRibbonEllipse_descriptor_,
      GuideRibbonEllipse::default_instance_,
      GuideRibbonEllipse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonEllipse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideRibbonEllipse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuideRibbonEllipse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideRibbonEllipse_descriptor_, &GuideRibbonEllipse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuideRibbonEllipse_2eproto() {
  delete GuideRibbonEllipse::default_instance_;
  delete GuideRibbonEllipse_reflection_;
}

void protobuf_AddDesc_GuideRibbonEllipse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_bootes_2fdances_2fproto_2fStage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030GuideRibbonEllipse.proto\022\002pb\032\037bootes/d"
    "ances/proto/Stage.proto\"}\n\022GuideRibbonEl"
    "lipse\022\031\n\006center\030\001 \002(\0132\t.pb.Point\022\031\n\006radi"
    "us\030\002 \002(\0132\t.pb.Point\022\016\n\006angle0\030\003 \002(\002\022\016\n\006a"
    "ngle1\030\004 \002(\002\022\021\n\tdirection\030\005 \002(\010", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuideRibbonEllipse.proto", &protobuf_RegisterTypes);
  GuideRibbonEllipse::default_instance_ = new GuideRibbonEllipse();
  GuideRibbonEllipse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuideRibbonEllipse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuideRibbonEllipse_2eproto {
  StaticDescriptorInitializer_GuideRibbonEllipse_2eproto() {
    protobuf_AddDesc_GuideRibbonEllipse_2eproto();
  }
} static_descriptor_initializer_GuideRibbonEllipse_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GuideRibbonEllipse::kCenterFieldNumber;
const int GuideRibbonEllipse::kRadiusFieldNumber;
const int GuideRibbonEllipse::kAngle0FieldNumber;
const int GuideRibbonEllipse::kAngle1FieldNumber;
const int GuideRibbonEllipse::kDirectionFieldNumber;
#endif  // !_MSC_VER

GuideRibbonEllipse::GuideRibbonEllipse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideRibbonEllipse::InitAsDefaultInstance() {
  center_ = const_cast< ::pb::Point*>(&::pb::Point::default_instance());
  radius_ = const_cast< ::pb::Point*>(&::pb::Point::default_instance());
}

GuideRibbonEllipse::GuideRibbonEllipse(const GuideRibbonEllipse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideRibbonEllipse::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  radius_ = NULL;
  angle0_ = 0;
  angle1_ = 0;
  direction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideRibbonEllipse::~GuideRibbonEllipse() {
  SharedDtor();
}

void GuideRibbonEllipse::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
    delete radius_;
  }
}

void GuideRibbonEllipse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideRibbonEllipse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideRibbonEllipse_descriptor_;
}

const GuideRibbonEllipse& GuideRibbonEllipse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideRibbonEllipse_2eproto();  return *default_instance_;
}

GuideRibbonEllipse* GuideRibbonEllipse::default_instance_ = NULL;

GuideRibbonEllipse* GuideRibbonEllipse::New() const {
  return new GuideRibbonEllipse;
}

void GuideRibbonEllipse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::pb::Point::Clear();
    }
    if (has_radius()) {
      if (radius_ != NULL) radius_->::pb::Point::Clear();
    }
    angle0_ = 0;
    angle1_ = 0;
    direction_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideRibbonEllipse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Point center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_radius;
        break;
      }
      
      // required .pb.Point radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radius()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle0;
        break;
      }
      
      // required float angle0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle0_)));
          set_has_angle0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle1;
        break;
      }
      
      // required float angle1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle1_)));
          set_has_angle1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }
      
      // required bool direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideRibbonEllipse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Point center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }
  
  // required .pb.Point radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radius(), output);
  }
  
  // required float angle0 = 3;
  if (has_angle0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle0(), output);
  }
  
  // required float angle1 = 4;
  if (has_angle1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle1(), output);
  }
  
  // required bool direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideRibbonEllipse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Point center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }
  
  // required .pb.Point radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->radius(), target);
  }
  
  // required float angle0 = 3;
  if (has_angle0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle0(), target);
  }
  
  // required float angle1 = 4;
  if (has_angle1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle1(), target);
  }
  
  // required bool direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideRibbonEllipse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Point center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // required .pb.Point radius = 2;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radius());
    }
    
    // required float angle0 = 3;
    if (has_angle0()) {
      total_size += 1 + 4;
    }
    
    // required float angle1 = 4;
    if (has_angle1()) {
      total_size += 1 + 4;
    }
    
    // required bool direction = 5;
    if (has_direction()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideRibbonEllipse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideRibbonEllipse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideRibbonEllipse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideRibbonEllipse::MergeFrom(const GuideRibbonEllipse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::pb::Point::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      mutable_radius()->::pb::Point::MergeFrom(from.radius());
    }
    if (from.has_angle0()) {
      set_angle0(from.angle0());
    }
    if (from.has_angle1()) {
      set_angle1(from.angle1());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideRibbonEllipse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideRibbonEllipse::CopyFrom(const GuideRibbonEllipse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideRibbonEllipse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  if (has_radius()) {
    if (!this->radius().IsInitialized()) return false;
  }
  return true;
}

void GuideRibbonEllipse::Swap(GuideRibbonEllipse* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    std::swap(angle0_, other->angle0_);
    std::swap(angle1_, other->angle1_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideRibbonEllipse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideRibbonEllipse_descriptor_;
  metadata.reflection = GuideRibbonEllipse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
