// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuideRibbon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GuideRibbon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideRibbon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideRibbon_Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideRibbon_Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideRibbon_Ellipse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideRibbon_Ellipse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideRibbon_Spline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideRibbon_Spline_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideRibbonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideRibbonList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuideRibbon_2eproto() {
  protobuf_AddDesc_GuideRibbon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuideRibbon.proto");
  GOOGLE_CHECK(file != NULL);
  GuideRibbon_descriptor_ = file->message_type(0);
  static const int GuideRibbon_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, time0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, time1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, chainnext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, ellipse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, spline_),
  };
  GuideRibbon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideRibbon_descriptor_,
      GuideRibbon::default_instance_,
      GuideRibbon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideRibbon));
  GuideRibbon_Line_descriptor_ = GuideRibbon_descriptor_->nested_type(0);
  static const int GuideRibbon_Line_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Line, points_),
  };
  GuideRibbon_Line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideRibbon_Line_descriptor_,
      GuideRibbon_Line::default_instance_,
      GuideRibbon_Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideRibbon_Line));
  GuideRibbon_Ellipse_descriptor_ = GuideRibbon_descriptor_->nested_type(1);
  static const int GuideRibbon_Ellipse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, angle0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, angle1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, direction_),
  };
  GuideRibbon_Ellipse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideRibbon_Ellipse_descriptor_,
      GuideRibbon_Ellipse::default_instance_,
      GuideRibbon_Ellipse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Ellipse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideRibbon_Ellipse));
  GuideRibbon_Spline_descriptor_ = GuideRibbon_descriptor_->nested_type(2);
  static const int GuideRibbon_Spline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Spline, points_),
  };
  GuideRibbon_Spline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideRibbon_Spline_descriptor_,
      GuideRibbon_Spline::default_instance_,
      GuideRibbon_Spline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Spline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbon_Spline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideRibbon_Spline));
  GuideRibbonList_descriptor_ = file->message_type(1);
  static const int GuideRibbonList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonList, guides_),
  };
  GuideRibbonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideRibbonList_descriptor_,
      GuideRibbonList::default_instance_,
      GuideRibbonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideRibbonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideRibbonList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuideRibbon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideRibbon_descriptor_, &GuideRibbon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideRibbon_Line_descriptor_, &GuideRibbon_Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideRibbon_Ellipse_descriptor_, &GuideRibbon_Ellipse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideRibbon_Spline_descriptor_, &GuideRibbon_Spline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideRibbonList_descriptor_, &GuideRibbonList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuideRibbon_2eproto() {
  delete GuideRibbon::default_instance_;
  delete GuideRibbon_reflection_;
  delete GuideRibbon_Line::default_instance_;
  delete GuideRibbon_Line_reflection_;
  delete GuideRibbon_Ellipse::default_instance_;
  delete GuideRibbon_Ellipse_reflection_;
  delete GuideRibbon_Spline::default_instance_;
  delete GuideRibbon_Spline_reflection_;
  delete GuideRibbonList::default_instance_;
  delete GuideRibbonList_reflection_;
}

void protobuf_AddDesc_GuideRibbon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_bootes_2fdances_2fproto_2fStage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GuideRibbon.proto\022\002pb\032\037bootes/dances/p"
    "roto/Stage.proto\"\376\002\n\013GuideRibbon\022\014\n\004uuid"
    "\030\001 \002(\t\022\r\n\005time0\030\002 \002(\003\022\r\n\005time1\030\003 \002(\003\022\021\n\t"
    "chainnext\030\004 \002(\010\022\"\n\004line\030\n \001(\0132\024.pb.Guide"
    "Ribbon.Line\022(\n\007ellipse\030\013 \001(\0132\027.pb.GuideR"
    "ibbon.Ellipse\022&\n\006spline\030\014 \001(\0132\026.pb.Guide"
    "Ribbon.Spline\032!\n\004Line\022\031\n\006points\030\001 \003(\0132\t."
    "pb.Point\032r\n\007Ellipse\022\031\n\006center\030\001 \002(\0132\t.pb"
    ".Point\022\031\n\006radius\030\002 \002(\0132\t.pb.Point\022\016\n\006ang"
    "le0\030\003 \002(\002\022\016\n\006angle1\030\004 \002(\002\022\021\n\tdirection\030\005"
    " \002(\010\032#\n\006Spline\022\031\n\006points\030\001 \003(\0132\t.pb.Poin"
    "t\"2\n\017GuideRibbonList\022\037\n\006guides\030\001 \003(\0132\017.p"
    "b.GuideRibbon", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuideRibbon.proto", &protobuf_RegisterTypes);
  GuideRibbon::default_instance_ = new GuideRibbon();
  GuideRibbon_Line::default_instance_ = new GuideRibbon_Line();
  GuideRibbon_Ellipse::default_instance_ = new GuideRibbon_Ellipse();
  GuideRibbon_Spline::default_instance_ = new GuideRibbon_Spline();
  GuideRibbonList::default_instance_ = new GuideRibbonList();
  GuideRibbon::default_instance_->InitAsDefaultInstance();
  GuideRibbon_Line::default_instance_->InitAsDefaultInstance();
  GuideRibbon_Ellipse::default_instance_->InitAsDefaultInstance();
  GuideRibbon_Spline::default_instance_->InitAsDefaultInstance();
  GuideRibbonList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuideRibbon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuideRibbon_2eproto {
  StaticDescriptorInitializer_GuideRibbon_2eproto() {
    protobuf_AddDesc_GuideRibbon_2eproto();
  }
} static_descriptor_initializer_GuideRibbon_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GuideRibbon_Line::kPointsFieldNumber;
#endif  // !_MSC_VER

GuideRibbon_Line::GuideRibbon_Line()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideRibbon_Line::InitAsDefaultInstance() {
}

GuideRibbon_Line::GuideRibbon_Line(const GuideRibbon_Line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideRibbon_Line::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideRibbon_Line::~GuideRibbon_Line() {
  SharedDtor();
}

void GuideRibbon_Line::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideRibbon_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideRibbon_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideRibbon_Line_descriptor_;
}

const GuideRibbon_Line& GuideRibbon_Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideRibbon_2eproto();  return *default_instance_;
}

GuideRibbon_Line* GuideRibbon_Line::default_instance_ = NULL;

GuideRibbon_Line* GuideRibbon_Line::New() const {
  return new GuideRibbon_Line;
}

void GuideRibbon_Line::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideRibbon_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Point points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideRibbon_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideRibbon_Line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideRibbon_Line::ByteSize() const {
  int total_size = 0;
  
  // repeated .pb.Point points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideRibbon_Line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideRibbon_Line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideRibbon_Line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideRibbon_Line::MergeFrom(const GuideRibbon_Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideRibbon_Line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideRibbon_Line::CopyFrom(const GuideRibbon_Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideRibbon_Line::IsInitialized() const {
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void GuideRibbon_Line::Swap(GuideRibbon_Line* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideRibbon_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideRibbon_Line_descriptor_;
  metadata.reflection = GuideRibbon_Line_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GuideRibbon_Ellipse::kCenterFieldNumber;
const int GuideRibbon_Ellipse::kRadiusFieldNumber;
const int GuideRibbon_Ellipse::kAngle0FieldNumber;
const int GuideRibbon_Ellipse::kAngle1FieldNumber;
const int GuideRibbon_Ellipse::kDirectionFieldNumber;
#endif  // !_MSC_VER

GuideRibbon_Ellipse::GuideRibbon_Ellipse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideRibbon_Ellipse::InitAsDefaultInstance() {
  center_ = const_cast< ::pb::Point*>(&::pb::Point::default_instance());
  radius_ = const_cast< ::pb::Point*>(&::pb::Point::default_instance());
}

GuideRibbon_Ellipse::GuideRibbon_Ellipse(const GuideRibbon_Ellipse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideRibbon_Ellipse::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  radius_ = NULL;
  angle0_ = 0;
  angle1_ = 0;
  direction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideRibbon_Ellipse::~GuideRibbon_Ellipse() {
  SharedDtor();
}

void GuideRibbon_Ellipse::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
    delete radius_;
  }
}

void GuideRibbon_Ellipse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideRibbon_Ellipse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideRibbon_Ellipse_descriptor_;
}

const GuideRibbon_Ellipse& GuideRibbon_Ellipse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideRibbon_2eproto();  return *default_instance_;
}

GuideRibbon_Ellipse* GuideRibbon_Ellipse::default_instance_ = NULL;

GuideRibbon_Ellipse* GuideRibbon_Ellipse::New() const {
  return new GuideRibbon_Ellipse;
}

void GuideRibbon_Ellipse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::pb::Point::Clear();
    }
    if (has_radius()) {
      if (radius_ != NULL) radius_->::pb::Point::Clear();
    }
    angle0_ = 0;
    angle1_ = 0;
    direction_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideRibbon_Ellipse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.Point center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_radius;
        break;
      }
      
      // required .pb.Point radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radius:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radius()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle0;
        break;
      }
      
      // required float angle0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle0_)));
          set_has_angle0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle1;
        break;
      }
      
      // required float angle1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle1_)));
          set_has_angle1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }
      
      // required bool direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideRibbon_Ellipse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pb.Point center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }
  
  // required .pb.Point radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radius(), output);
  }
  
  // required float angle0 = 3;
  if (has_angle0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle0(), output);
  }
  
  // required float angle1 = 4;
  if (has_angle1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle1(), output);
  }
  
  // required bool direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideRibbon_Ellipse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pb.Point center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }
  
  // required .pb.Point radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->radius(), target);
  }
  
  // required float angle0 = 3;
  if (has_angle0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle0(), target);
  }
  
  // required float angle1 = 4;
  if (has_angle1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle1(), target);
  }
  
  // required bool direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideRibbon_Ellipse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.Point center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }
    
    // required .pb.Point radius = 2;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radius());
    }
    
    // required float angle0 = 3;
    if (has_angle0()) {
      total_size += 1 + 4;
    }
    
    // required float angle1 = 4;
    if (has_angle1()) {
      total_size += 1 + 4;
    }
    
    // required bool direction = 5;
    if (has_direction()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideRibbon_Ellipse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideRibbon_Ellipse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideRibbon_Ellipse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideRibbon_Ellipse::MergeFrom(const GuideRibbon_Ellipse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::pb::Point::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      mutable_radius()->::pb::Point::MergeFrom(from.radius());
    }
    if (from.has_angle0()) {
      set_angle0(from.angle0());
    }
    if (from.has_angle1()) {
      set_angle1(from.angle1());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideRibbon_Ellipse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideRibbon_Ellipse::CopyFrom(const GuideRibbon_Ellipse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideRibbon_Ellipse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  if (has_radius()) {
    if (!this->radius().IsInitialized()) return false;
  }
  return true;
}

void GuideRibbon_Ellipse::Swap(GuideRibbon_Ellipse* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    std::swap(angle0_, other->angle0_);
    std::swap(angle1_, other->angle1_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideRibbon_Ellipse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideRibbon_Ellipse_descriptor_;
  metadata.reflection = GuideRibbon_Ellipse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GuideRibbon_Spline::kPointsFieldNumber;
#endif  // !_MSC_VER

GuideRibbon_Spline::GuideRibbon_Spline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideRibbon_Spline::InitAsDefaultInstance() {
}

GuideRibbon_Spline::GuideRibbon_Spline(const GuideRibbon_Spline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideRibbon_Spline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideRibbon_Spline::~GuideRibbon_Spline() {
  SharedDtor();
}

void GuideRibbon_Spline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideRibbon_Spline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideRibbon_Spline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideRibbon_Spline_descriptor_;
}

const GuideRibbon_Spline& GuideRibbon_Spline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideRibbon_2eproto();  return *default_instance_;
}

GuideRibbon_Spline* GuideRibbon_Spline::default_instance_ = NULL;

GuideRibbon_Spline* GuideRibbon_Spline::New() const {
  return new GuideRibbon_Spline;
}

void GuideRibbon_Spline::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideRibbon_Spline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Point points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideRibbon_Spline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideRibbon_Spline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideRibbon_Spline::ByteSize() const {
  int total_size = 0;
  
  // repeated .pb.Point points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideRibbon_Spline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideRibbon_Spline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideRibbon_Spline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideRibbon_Spline::MergeFrom(const GuideRibbon_Spline& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideRibbon_Spline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideRibbon_Spline::CopyFrom(const GuideRibbon_Spline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideRibbon_Spline::IsInitialized() const {
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void GuideRibbon_Spline::Swap(GuideRibbon_Spline* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideRibbon_Spline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideRibbon_Spline_descriptor_;
  metadata.reflection = GuideRibbon_Spline_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GuideRibbon::kUuidFieldNumber;
const int GuideRibbon::kTime0FieldNumber;
const int GuideRibbon::kTime1FieldNumber;
const int GuideRibbon::kChainnextFieldNumber;
const int GuideRibbon::kLineFieldNumber;
const int GuideRibbon::kEllipseFieldNumber;
const int GuideRibbon::kSplineFieldNumber;
#endif  // !_MSC_VER

GuideRibbon::GuideRibbon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideRibbon::InitAsDefaultInstance() {
  line_ = const_cast< ::pb::GuideRibbon_Line*>(&::pb::GuideRibbon_Line::default_instance());
  ellipse_ = const_cast< ::pb::GuideRibbon_Ellipse*>(&::pb::GuideRibbon_Ellipse::default_instance());
  spline_ = const_cast< ::pb::GuideRibbon_Spline*>(&::pb::GuideRibbon_Spline::default_instance());
}

GuideRibbon::GuideRibbon(const GuideRibbon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideRibbon::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time0_ = GOOGLE_LONGLONG(0);
  time1_ = GOOGLE_LONGLONG(0);
  chainnext_ = false;
  line_ = NULL;
  ellipse_ = NULL;
  spline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideRibbon::~GuideRibbon() {
  SharedDtor();
}

void GuideRibbon::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete line_;
    delete ellipse_;
    delete spline_;
  }
}

void GuideRibbon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideRibbon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideRibbon_descriptor_;
}

const GuideRibbon& GuideRibbon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideRibbon_2eproto();  return *default_instance_;
}

GuideRibbon* GuideRibbon::default_instance_ = NULL;

GuideRibbon* GuideRibbon::New() const {
  return new GuideRibbon;
}

void GuideRibbon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    time0_ = GOOGLE_LONGLONG(0);
    time1_ = GOOGLE_LONGLONG(0);
    chainnext_ = false;
    if (has_line()) {
      if (line_ != NULL) line_->::pb::GuideRibbon_Line::Clear();
    }
    if (has_ellipse()) {
      if (ellipse_ != NULL) ellipse_->::pb::GuideRibbon_Ellipse::Clear();
    }
    if (has_spline()) {
      if (spline_ != NULL) spline_->::pb::GuideRibbon_Spline::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideRibbon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time0;
        break;
      }
      
      // required int64 time0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time0_)));
          set_has_time0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time1;
        break;
      }
      
      // required int64 time1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time1_)));
          set_has_time1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chainnext;
        break;
      }
      
      // required bool chainnext = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chainnext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chainnext_)));
          set_has_chainnext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_line;
        break;
      }
      
      // optional .pb.GuideRibbon.Line line = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ellipse;
        break;
      }
      
      // optional .pb.GuideRibbon.Ellipse ellipse = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ellipse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ellipse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_spline;
        break;
      }
      
      // optional .pb.GuideRibbon.Spline spline = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideRibbon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }
  
  // required int64 time0 = 2;
  if (has_time0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time0(), output);
  }
  
  // required int64 time1 = 3;
  if (has_time1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time1(), output);
  }
  
  // required bool chainnext = 4;
  if (has_chainnext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->chainnext(), output);
  }
  
  // optional .pb.GuideRibbon.Line line = 10;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->line(), output);
  }
  
  // optional .pb.GuideRibbon.Ellipse ellipse = 11;
  if (has_ellipse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ellipse(), output);
  }
  
  // optional .pb.GuideRibbon.Spline spline = 12;
  if (has_spline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->spline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideRibbon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }
  
  // required int64 time0 = 2;
  if (has_time0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time0(), target);
  }
  
  // required int64 time1 = 3;
  if (has_time1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time1(), target);
  }
  
  // required bool chainnext = 4;
  if (has_chainnext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->chainnext(), target);
  }
  
  // optional .pb.GuideRibbon.Line line = 10;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->line(), target);
  }
  
  // optional .pb.GuideRibbon.Ellipse ellipse = 11;
  if (has_ellipse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ellipse(), target);
  }
  
  // optional .pb.GuideRibbon.Spline spline = 12;
  if (has_spline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->spline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideRibbon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required int64 time0 = 2;
    if (has_time0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time0());
    }
    
    // required int64 time1 = 3;
    if (has_time1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time1());
    }
    
    // required bool chainnext = 4;
    if (has_chainnext()) {
      total_size += 1 + 1;
    }
    
    // optional .pb.GuideRibbon.Line line = 10;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }
    
    // optional .pb.GuideRibbon.Ellipse ellipse = 11;
    if (has_ellipse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ellipse());
    }
    
    // optional .pb.GuideRibbon.Spline spline = 12;
    if (has_spline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideRibbon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideRibbon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideRibbon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideRibbon::MergeFrom(const GuideRibbon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_time0()) {
      set_time0(from.time0());
    }
    if (from.has_time1()) {
      set_time1(from.time1());
    }
    if (from.has_chainnext()) {
      set_chainnext(from.chainnext());
    }
    if (from.has_line()) {
      mutable_line()->::pb::GuideRibbon_Line::MergeFrom(from.line());
    }
    if (from.has_ellipse()) {
      mutable_ellipse()->::pb::GuideRibbon_Ellipse::MergeFrom(from.ellipse());
    }
    if (from.has_spline()) {
      mutable_spline()->::pb::GuideRibbon_Spline::MergeFrom(from.spline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideRibbon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideRibbon::CopyFrom(const GuideRibbon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideRibbon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  if (has_ellipse()) {
    if (!this->ellipse().IsInitialized()) return false;
  }
  if (has_spline()) {
    if (!this->spline().IsInitialized()) return false;
  }
  return true;
}

void GuideRibbon::Swap(GuideRibbon* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(time0_, other->time0_);
    std::swap(time1_, other->time1_);
    std::swap(chainnext_, other->chainnext_);
    std::swap(line_, other->line_);
    std::swap(ellipse_, other->ellipse_);
    std::swap(spline_, other->spline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideRibbon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideRibbon_descriptor_;
  metadata.reflection = GuideRibbon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideRibbonList::kGuidesFieldNumber;
#endif  // !_MSC_VER

GuideRibbonList::GuideRibbonList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideRibbonList::InitAsDefaultInstance() {
}

GuideRibbonList::GuideRibbonList(const GuideRibbonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideRibbonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideRibbonList::~GuideRibbonList() {
  SharedDtor();
}

void GuideRibbonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideRibbonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideRibbonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideRibbonList_descriptor_;
}

const GuideRibbonList& GuideRibbonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideRibbon_2eproto();  return *default_instance_;
}

GuideRibbonList* GuideRibbonList::default_instance_ = NULL;

GuideRibbonList* GuideRibbonList::New() const {
  return new GuideRibbonList;
}

void GuideRibbonList::Clear() {
  guides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideRibbonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GuideRibbon guides = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guides;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideRibbonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.GuideRibbon guides = 1;
  for (int i = 0; i < this->guides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guides(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideRibbonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.GuideRibbon guides = 1;
  for (int i = 0; i < this->guides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guides(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideRibbonList::ByteSize() const {
  int total_size = 0;
  
  // repeated .pb.GuideRibbon guides = 1;
  total_size += 1 * this->guides_size();
  for (int i = 0; i < this->guides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guides(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideRibbonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideRibbonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideRibbonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideRibbonList::MergeFrom(const GuideRibbonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  guides_.MergeFrom(from.guides_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideRibbonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideRibbonList::CopyFrom(const GuideRibbonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideRibbonList::IsInitialized() const {
  
  for (int i = 0; i < guides_size(); i++) {
    if (!this->guides(i).IsInitialized()) return false;
  }
  return true;
}

void GuideRibbonList::Swap(GuideRibbonList* other) {
  if (other != this) {
    guides_.Swap(&other->guides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideRibbonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideRibbonList_descriptor_;
  metadata.reflection = GuideRibbonList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
