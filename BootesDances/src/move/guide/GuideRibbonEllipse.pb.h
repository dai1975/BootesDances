// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuideRibbonEllipse.proto

#ifndef PROTOBUF_GuideRibbonEllipse_2eproto__INCLUDED
#define PROTOBUF_GuideRibbonEllipse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "bootes/dances/proto/Stage.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GuideRibbonEllipse_2eproto();
void protobuf_AssignDesc_GuideRibbonEllipse_2eproto();
void protobuf_ShutdownFile_GuideRibbonEllipse_2eproto();

class GuideRibbonEllipse;

// ===================================================================

class GuideRibbonEllipse : public ::google::protobuf::Message {
 public:
  GuideRibbonEllipse();
  virtual ~GuideRibbonEllipse();
  
  GuideRibbonEllipse(const GuideRibbonEllipse& from);
  
  inline GuideRibbonEllipse& operator=(const GuideRibbonEllipse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuideRibbonEllipse& default_instance();
  
  void Swap(GuideRibbonEllipse* other);
  
  // implements Message ----------------------------------------------
  
  GuideRibbonEllipse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuideRibbonEllipse& from);
  void MergeFrom(const GuideRibbonEllipse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .pb.Point center = 1;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 1;
  inline const ::pb::Point& center() const;
  inline ::pb::Point* mutable_center();
  inline ::pb::Point* release_center();
  
  // required .pb.Point radius = 2;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline const ::pb::Point& radius() const;
  inline ::pb::Point* mutable_radius();
  inline ::pb::Point* release_radius();
  
  // required float angle0 = 3;
  inline bool has_angle0() const;
  inline void clear_angle0();
  static const int kAngle0FieldNumber = 3;
  inline float angle0() const;
  inline void set_angle0(float value);
  
  // required float angle1 = 4;
  inline bool has_angle1() const;
  inline void clear_angle1();
  static const int kAngle1FieldNumber = 4;
  inline float angle1() const;
  inline void set_angle1(float value);
  
  // required bool direction = 5;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 5;
  inline bool direction() const;
  inline void set_direction(bool value);
  
  // @@protoc_insertion_point(class_scope:pb.GuideRibbonEllipse)
 private:
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_angle0();
  inline void clear_has_angle0();
  inline void set_has_angle1();
  inline void clear_has_angle1();
  inline void set_has_direction();
  inline void clear_has_direction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::pb::Point* center_;
  ::pb::Point* radius_;
  float angle0_;
  float angle1_;
  bool direction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GuideRibbonEllipse_2eproto();
  friend void protobuf_AssignDesc_GuideRibbonEllipse_2eproto();
  friend void protobuf_ShutdownFile_GuideRibbonEllipse_2eproto();
  
  void InitAsDefaultInstance();
  static GuideRibbonEllipse* default_instance_;
};
// ===================================================================


// ===================================================================

// GuideRibbonEllipse

// required .pb.Point center = 1;
inline bool GuideRibbonEllipse::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuideRibbonEllipse::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuideRibbonEllipse::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuideRibbonEllipse::clear_center() {
  if (center_ != NULL) center_->::pb::Point::Clear();
  clear_has_center();
}
inline const ::pb::Point& GuideRibbonEllipse::center() const {
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::pb::Point* GuideRibbonEllipse::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::pb::Point;
  return center_;
}
inline ::pb::Point* GuideRibbonEllipse::release_center() {
  clear_has_center();
  ::pb::Point* temp = center_;
  center_ = NULL;
  return temp;
}

// required .pb.Point radius = 2;
inline bool GuideRibbonEllipse::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuideRibbonEllipse::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuideRibbonEllipse::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuideRibbonEllipse::clear_radius() {
  if (radius_ != NULL) radius_->::pb::Point::Clear();
  clear_has_radius();
}
inline const ::pb::Point& GuideRibbonEllipse::radius() const {
  return radius_ != NULL ? *radius_ : *default_instance_->radius_;
}
inline ::pb::Point* GuideRibbonEllipse::mutable_radius() {
  set_has_radius();
  if (radius_ == NULL) radius_ = new ::pb::Point;
  return radius_;
}
inline ::pb::Point* GuideRibbonEllipse::release_radius() {
  clear_has_radius();
  ::pb::Point* temp = radius_;
  radius_ = NULL;
  return temp;
}

// required float angle0 = 3;
inline bool GuideRibbonEllipse::has_angle0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuideRibbonEllipse::set_has_angle0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuideRibbonEllipse::clear_has_angle0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuideRibbonEllipse::clear_angle0() {
  angle0_ = 0;
  clear_has_angle0();
}
inline float GuideRibbonEllipse::angle0() const {
  return angle0_;
}
inline void GuideRibbonEllipse::set_angle0(float value) {
  set_has_angle0();
  angle0_ = value;
}

// required float angle1 = 4;
inline bool GuideRibbonEllipse::has_angle1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuideRibbonEllipse::set_has_angle1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuideRibbonEllipse::clear_has_angle1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuideRibbonEllipse::clear_angle1() {
  angle1_ = 0;
  clear_has_angle1();
}
inline float GuideRibbonEllipse::angle1() const {
  return angle1_;
}
inline void GuideRibbonEllipse::set_angle1(float value) {
  set_has_angle1();
  angle1_ = value;
}

// required bool direction = 5;
inline bool GuideRibbonEllipse::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuideRibbonEllipse::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuideRibbonEllipse::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuideRibbonEllipse::clear_direction() {
  direction_ = false;
  clear_has_direction();
}
inline bool GuideRibbonEllipse::direction() const {
  return direction_;
}
inline void GuideRibbonEllipse::set_direction(bool value) {
  set_has_direction();
  direction_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GuideRibbonEllipse_2eproto__INCLUDED
