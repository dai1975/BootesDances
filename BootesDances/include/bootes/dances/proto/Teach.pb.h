// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bootes/dances/proto/Teach.proto

#ifndef PROTOBUF_bootes_2fdances_2fproto_2fTeach_2eproto__INCLUDED
#define PROTOBUF_bootes_2fdances_2fproto_2fTeach_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "bootes/dances/proto/Stage.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
void protobuf_AssignDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fTeach_2eproto();

class TeachRecord;
class TeachSequence;
class TeachClear;
class TeachCommand;
class TeachLog;

// ===================================================================

class TeachRecord : public ::google::protobuf::Message {
 public:
  TeachRecord();
  virtual ~TeachRecord();
  
  TeachRecord(const TeachRecord& from);
  
  inline TeachRecord& operator=(const TeachRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeachRecord& default_instance();
  
  void Swap(TeachRecord* other);
  
  // implements Message ----------------------------------------------
  
  TeachRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeachRecord& from);
  void MergeFrom(const TeachRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required .pb.Motion.Accel accel = 10;
  inline bool has_accel() const;
  inline void clear_accel();
  static const int kAccelFieldNumber = 10;
  inline const ::pb::Motion_Accel& accel() const;
  inline ::pb::Motion_Accel* mutable_accel();
  inline ::pb::Motion_Accel* release_accel();
  
  // required .pb.Motion.Gyro gyro = 11;
  inline bool has_gyro() const;
  inline void clear_gyro();
  static const int kGyroFieldNumber = 11;
  inline const ::pb::Motion_Gyro& gyro() const;
  inline ::pb::Motion_Gyro* mutable_gyro();
  inline ::pb::Motion_Gyro* release_gyro();
  
  // @@protoc_insertion_point(class_scope:pb.TeachRecord)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_accel();
  inline void clear_has_accel();
  inline void set_has_gyro();
  inline void clear_has_gyro();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::pb::Motion_Accel* accel_;
  ::pb::Motion_Gyro* gyro_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_AssignDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fTeach_2eproto();
  
  void InitAsDefaultInstance();
  static TeachRecord* default_instance_;
};
// -------------------------------------------------------------------

class TeachSequence : public ::google::protobuf::Message {
 public:
  TeachSequence();
  virtual ~TeachSequence();
  
  TeachSequence(const TeachSequence& from);
  
  inline TeachSequence& operator=(const TeachSequence& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeachSequence& default_instance();
  
  void Swap(TeachSequence* other);
  
  // implements Message ----------------------------------------------
  
  TeachSequence* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeachSequence& from);
  void MergeFrom(const TeachSequence& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // required bool succeed = 2;
  inline bool has_succeed() const;
  inline void clear_succeed();
  static const int kSucceedFieldNumber = 2;
  inline bool succeed() const;
  inline void set_succeed(bool value);
  
  // repeated .pb.TeachRecord records = 3;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 3;
  inline const ::pb::TeachRecord& records(int index) const;
  inline ::pb::TeachRecord* mutable_records(int index);
  inline ::pb::TeachRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TeachRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TeachRecord >*
      mutable_records();
  
  // @@protoc_insertion_point(class_scope:pb.TeachSequence)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_succeed();
  inline void clear_has_succeed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uuid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TeachRecord > records_;
  bool succeed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_AssignDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fTeach_2eproto();
  
  void InitAsDefaultInstance();
  static TeachSequence* default_instance_;
};
// -------------------------------------------------------------------

class TeachClear : public ::google::protobuf::Message {
 public:
  TeachClear();
  virtual ~TeachClear();
  
  TeachClear(const TeachClear& from);
  
  inline TeachClear& operator=(const TeachClear& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeachClear& default_instance();
  
  void Swap(TeachClear* other);
  
  // implements Message ----------------------------------------------
  
  TeachClear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeachClear& from);
  void MergeFrom(const TeachClear& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // @@protoc_insertion_point(class_scope:pb.TeachClear)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_AssignDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fTeach_2eproto();
  
  void InitAsDefaultInstance();
  static TeachClear* default_instance_;
};
// -------------------------------------------------------------------

class TeachCommand : public ::google::protobuf::Message {
 public:
  TeachCommand();
  virtual ~TeachCommand();
  
  TeachCommand(const TeachCommand& from);
  
  inline TeachCommand& operator=(const TeachCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeachCommand& default_instance();
  
  void Swap(TeachCommand* other);
  
  // implements Message ----------------------------------------------
  
  TeachCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeachCommand& from);
  void MergeFrom(const TeachCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .pb.TeachSequence sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline const ::pb::TeachSequence& sequence() const;
  inline ::pb::TeachSequence* mutable_sequence();
  inline ::pb::TeachSequence* release_sequence();
  
  // optional .pb.TeachClear clear = 2;
  inline bool has_clear() const;
  inline void clear_clear();
  static const int kClearFieldNumber = 2;
  inline const ::pb::TeachClear& clear() const;
  inline ::pb::TeachClear* mutable_clear();
  inline ::pb::TeachClear* release_clear();
  
  // @@protoc_insertion_point(class_scope:pb.TeachCommand)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_clear();
  inline void clear_has_clear();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::pb::TeachSequence* sequence_;
  ::pb::TeachClear* clear_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_AssignDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fTeach_2eproto();
  
  void InitAsDefaultInstance();
  static TeachCommand* default_instance_;
};
// -------------------------------------------------------------------

class TeachLog : public ::google::protobuf::Message {
 public:
  TeachLog();
  virtual ~TeachLog();
  
  TeachLog(const TeachLog& from);
  
  inline TeachLog& operator=(const TeachLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeachLog& default_instance();
  
  void Swap(TeachLog* other);
  
  // implements Message ----------------------------------------------
  
  TeachLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeachLog& from);
  void MergeFrom(const TeachLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .pb.TeachCommand commands = 1;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 1;
  inline const ::pb::TeachCommand& commands(int index) const;
  inline ::pb::TeachCommand* mutable_commands(int index);
  inline ::pb::TeachCommand* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TeachCommand >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TeachCommand >*
      mutable_commands();
  
  // @@protoc_insertion_point(class_scope:pb.TeachLog)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::pb::TeachCommand > commands_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_AssignDesc_bootes_2fdances_2fproto_2fTeach_2eproto();
  friend void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fTeach_2eproto();
  
  void InitAsDefaultInstance();
  static TeachLog* default_instance_;
};
// ===================================================================


// ===================================================================

// TeachRecord

// required int32 time = 1;
inline bool TeachRecord::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeachRecord::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeachRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeachRecord::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 TeachRecord::time() const {
  return time_;
}
inline void TeachRecord::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required .pb.Motion.Accel accel = 10;
inline bool TeachRecord::has_accel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeachRecord::set_has_accel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeachRecord::clear_has_accel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeachRecord::clear_accel() {
  if (accel_ != NULL) accel_->::pb::Motion_Accel::Clear();
  clear_has_accel();
}
inline const ::pb::Motion_Accel& TeachRecord::accel() const {
  return accel_ != NULL ? *accel_ : *default_instance_->accel_;
}
inline ::pb::Motion_Accel* TeachRecord::mutable_accel() {
  set_has_accel();
  if (accel_ == NULL) accel_ = new ::pb::Motion_Accel;
  return accel_;
}
inline ::pb::Motion_Accel* TeachRecord::release_accel() {
  clear_has_accel();
  ::pb::Motion_Accel* temp = accel_;
  accel_ = NULL;
  return temp;
}

// required .pb.Motion.Gyro gyro = 11;
inline bool TeachRecord::has_gyro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeachRecord::set_has_gyro() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeachRecord::clear_has_gyro() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeachRecord::clear_gyro() {
  if (gyro_ != NULL) gyro_->::pb::Motion_Gyro::Clear();
  clear_has_gyro();
}
inline const ::pb::Motion_Gyro& TeachRecord::gyro() const {
  return gyro_ != NULL ? *gyro_ : *default_instance_->gyro_;
}
inline ::pb::Motion_Gyro* TeachRecord::mutable_gyro() {
  set_has_gyro();
  if (gyro_ == NULL) gyro_ = new ::pb::Motion_Gyro;
  return gyro_;
}
inline ::pb::Motion_Gyro* TeachRecord::release_gyro() {
  clear_has_gyro();
  ::pb::Motion_Gyro* temp = gyro_;
  gyro_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TeachSequence

// required string uuid = 1;
inline bool TeachSequence::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeachSequence::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeachSequence::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeachSequence::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& TeachSequence::uuid() const {
  return *uuid_;
}
inline void TeachSequence::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void TeachSequence::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void TeachSequence::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeachSequence::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* TeachSequence::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool succeed = 2;
inline bool TeachSequence::has_succeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeachSequence::set_has_succeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeachSequence::clear_has_succeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeachSequence::clear_succeed() {
  succeed_ = false;
  clear_has_succeed();
}
inline bool TeachSequence::succeed() const {
  return succeed_;
}
inline void TeachSequence::set_succeed(bool value) {
  set_has_succeed();
  succeed_ = value;
}

// repeated .pb.TeachRecord records = 3;
inline int TeachSequence::records_size() const {
  return records_.size();
}
inline void TeachSequence::clear_records() {
  records_.Clear();
}
inline const ::pb::TeachRecord& TeachSequence::records(int index) const {
  return records_.Get(index);
}
inline ::pb::TeachRecord* TeachSequence::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::pb::TeachRecord* TeachSequence::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TeachRecord >&
TeachSequence::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TeachRecord >*
TeachSequence::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// TeachClear

// required string uuid = 1;
inline bool TeachClear::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeachClear::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeachClear::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeachClear::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& TeachClear::uuid() const {
  return *uuid_;
}
inline void TeachClear::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void TeachClear::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void TeachClear::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeachClear::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* TeachClear::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TeachCommand

// optional .pb.TeachSequence sequence = 1;
inline bool TeachCommand::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeachCommand::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeachCommand::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeachCommand::clear_sequence() {
  if (sequence_ != NULL) sequence_->::pb::TeachSequence::Clear();
  clear_has_sequence();
}
inline const ::pb::TeachSequence& TeachCommand::sequence() const {
  return sequence_ != NULL ? *sequence_ : *default_instance_->sequence_;
}
inline ::pb::TeachSequence* TeachCommand::mutable_sequence() {
  set_has_sequence();
  if (sequence_ == NULL) sequence_ = new ::pb::TeachSequence;
  return sequence_;
}
inline ::pb::TeachSequence* TeachCommand::release_sequence() {
  clear_has_sequence();
  ::pb::TeachSequence* temp = sequence_;
  sequence_ = NULL;
  return temp;
}

// optional .pb.TeachClear clear = 2;
inline bool TeachCommand::has_clear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeachCommand::set_has_clear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeachCommand::clear_has_clear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeachCommand::clear_clear() {
  if (clear_ != NULL) clear_->::pb::TeachClear::Clear();
  clear_has_clear();
}
inline const ::pb::TeachClear& TeachCommand::clear() const {
  return clear_ != NULL ? *clear_ : *default_instance_->clear_;
}
inline ::pb::TeachClear* TeachCommand::mutable_clear() {
  set_has_clear();
  if (clear_ == NULL) clear_ = new ::pb::TeachClear;
  return clear_;
}
inline ::pb::TeachClear* TeachCommand::release_clear() {
  clear_has_clear();
  ::pb::TeachClear* temp = clear_;
  clear_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TeachLog

// repeated .pb.TeachCommand commands = 1;
inline int TeachLog::commands_size() const {
  return commands_.size();
}
inline void TeachLog::clear_commands() {
  commands_.Clear();
}
inline const ::pb::TeachCommand& TeachLog::commands(int index) const {
  return commands_.Get(index);
}
inline ::pb::TeachCommand* TeachLog::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::pb::TeachCommand* TeachLog::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TeachCommand >&
TeachLog::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TeachCommand >*
TeachLog::mutable_commands() {
  return &commands_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bootes_2fdances_2fproto_2fTeach_2eproto__INCLUDED
