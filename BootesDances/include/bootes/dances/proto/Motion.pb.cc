// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bootes/dances/proto/Motion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Motion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Motion_Accel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_Accel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Motion_Gyro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_Gyro_reflection_ = NULL;
const ::google::protobuf::Descriptor* Motion_WiimoteSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_WiimoteSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Motion_WiimoteSimple_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Motion_WiimoteSimple_Entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bootes_2fdances_2fproto_2fMotion_2eproto() {
  protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bootes/dances/proto/Motion.proto");
  GOOGLE_CHECK(file != NULL);
  Motion_descriptor_ = file->message_type(0);
  static const int Motion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, wiimote_simple_),
  };
  Motion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_descriptor_,
      Motion::default_instance_,
      Motion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion));
  Motion_Accel_descriptor_ = Motion_descriptor_->nested_type(0);
  static const int Motion_Accel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Accel, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Accel, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Accel, z_),
  };
  Motion_Accel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_Accel_descriptor_,
      Motion_Accel::default_instance_,
      Motion_Accel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Accel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Accel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion_Accel));
  Motion_Gyro_descriptor_ = Motion_descriptor_->nested_type(1);
  static const int Motion_Gyro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Gyro, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Gyro, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Gyro, roll_),
  };
  Motion_Gyro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_Gyro_descriptor_,
      Motion_Gyro::default_instance_,
      Motion_Gyro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Gyro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_Gyro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion_Gyro));
  Motion_WiimoteSimple_descriptor_ = Motion_descriptor_->nested_type(2);
  static const int Motion_WiimoteSimple_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple, stept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple, minseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple, maxseq_),
  };
  Motion_WiimoteSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_WiimoteSimple_descriptor_,
      Motion_WiimoteSimple::default_instance_,
      Motion_WiimoteSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion_WiimoteSimple));
  Motion_WiimoteSimple_Entry_descriptor_ = Motion_WiimoteSimple_descriptor_->nested_type(0);
  static const int Motion_WiimoteSimple_Entry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple_Entry, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple_Entry, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple_Entry, gyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple_Entry, orien_),
  };
  Motion_WiimoteSimple_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Motion_WiimoteSimple_Entry_descriptor_,
      Motion_WiimoteSimple_Entry::default_instance_,
      Motion_WiimoteSimple_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Motion_WiimoteSimple_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Motion_WiimoteSimple_Entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bootes_2fdances_2fproto_2fMotion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_descriptor_, &Motion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_Accel_descriptor_, &Motion_Accel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_Gyro_descriptor_, &Motion_Gyro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_WiimoteSimple_descriptor_, &Motion_WiimoteSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Motion_WiimoteSimple_Entry_descriptor_, &Motion_WiimoteSimple_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bootes_2fdances_2fproto_2fMotion_2eproto() {
  delete Motion::default_instance_;
  delete Motion_reflection_;
  delete Motion_Accel::default_instance_;
  delete Motion_Accel_reflection_;
  delete Motion_Gyro::default_instance_;
  delete Motion_Gyro_reflection_;
  delete Motion_WiimoteSimple::default_instance_;
  delete Motion_WiimoteSimple_reflection_;
  delete Motion_WiimoteSimple_Entry::default_instance_;
  delete Motion_WiimoteSimple_Entry_reflection_;
}

void protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n bootes/dances/proto/Motion.proto\022\002pb\"\235"
    "\003\n\006Motion\022\020\n\010duration\030\001 \002(\005\0220\n\016wiimote_s"
    "imple\030d \001(\0132\030.pb.Motion.WiimoteSimple\032(\n"
    "\005Accel\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\032"
    "0\n\004Gyro\022\013\n\003yaw\030\001 \002(\002\022\r\n\005pitch\030\002 \002(\002\022\014\n\004r"
    "oll\030\003 \002(\002\032\362\001\n\rWiimoteSimple\022\r\n\005stept\030\001 \002"
    "(\005\022.\n\006minseq\030\002 \003(\0132\036.pb.Motion.WiimoteSi"
    "mple.Entry\022.\n\006maxseq\030\003 \003(\0132\036.pb.Motion.W"
    "iimoteSimple.Entry\032r\n\005Entry\022\t\n\001t\030\001 \002(\005\022\037"
    "\n\005accel\030\002 \002(\0132\020.pb.Motion.Accel\022\035\n\004gyro\030"
    "\003 \002(\0132\017.pb.Motion.Gyro\022\036\n\005orien\030\004 \002(\0132\017."
    "pb.Motion.Gyro", 454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bootes/dances/proto/Motion.proto", &protobuf_RegisterTypes);
  Motion::default_instance_ = new Motion();
  Motion_Accel::default_instance_ = new Motion_Accel();
  Motion_Gyro::default_instance_ = new Motion_Gyro();
  Motion_WiimoteSimple::default_instance_ = new Motion_WiimoteSimple();
  Motion_WiimoteSimple_Entry::default_instance_ = new Motion_WiimoteSimple_Entry();
  Motion::default_instance_->InitAsDefaultInstance();
  Motion_Accel::default_instance_->InitAsDefaultInstance();
  Motion_Gyro::default_instance_->InitAsDefaultInstance();
  Motion_WiimoteSimple::default_instance_->InitAsDefaultInstance();
  Motion_WiimoteSimple_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bootes_2fdances_2fproto_2fMotion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bootes_2fdances_2fproto_2fMotion_2eproto {
  StaticDescriptorInitializer_bootes_2fdances_2fproto_2fMotion_2eproto() {
    protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();
  }
} static_descriptor_initializer_bootes_2fdances_2fproto_2fMotion_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Motion_Accel::kXFieldNumber;
const int Motion_Accel::kYFieldNumber;
const int Motion_Accel::kZFieldNumber;
#endif  // !_MSC_VER

Motion_Accel::Motion_Accel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion_Accel::InitAsDefaultInstance() {
}

Motion_Accel::Motion_Accel(const Motion_Accel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion_Accel::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion_Accel::~Motion_Accel() {
  SharedDtor();
}

void Motion_Accel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Motion_Accel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion_Accel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_Accel_descriptor_;
}

const Motion_Accel& Motion_Accel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();  return *default_instance_;
}

Motion_Accel* Motion_Accel::default_instance_ = NULL;

Motion_Accel* Motion_Accel::New() const {
  return new Motion_Accel;
}

void Motion_Accel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion_Accel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion_Accel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion_Accel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion_Accel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion_Accel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion_Accel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion_Accel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion_Accel::MergeFrom(const Motion_Accel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion_Accel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_Accel::CopyFrom(const Motion_Accel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_Accel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Motion_Accel::Swap(Motion_Accel* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion_Accel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_Accel_descriptor_;
  metadata.reflection = Motion_Accel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Motion_Gyro::kYawFieldNumber;
const int Motion_Gyro::kPitchFieldNumber;
const int Motion_Gyro::kRollFieldNumber;
#endif  // !_MSC_VER

Motion_Gyro::Motion_Gyro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion_Gyro::InitAsDefaultInstance() {
}

Motion_Gyro::Motion_Gyro(const Motion_Gyro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion_Gyro::SharedCtor() {
  _cached_size_ = 0;
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion_Gyro::~Motion_Gyro() {
  SharedDtor();
}

void Motion_Gyro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Motion_Gyro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion_Gyro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_Gyro_descriptor_;
}

const Motion_Gyro& Motion_Gyro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();  return *default_instance_;
}

Motion_Gyro* Motion_Gyro::default_instance_ = NULL;

Motion_Gyro* Motion_Gyro::New() const {
  return new Motion_Gyro;
}

void Motion_Gyro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yaw_ = 0;
    pitch_ = 0;
    roll_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion_Gyro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float yaw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pitch;
        break;
      }
      
      // required float pitch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }
      
      // required float roll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion_Gyro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float yaw = 1;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->yaw(), output);
  }
  
  // required float pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }
  
  // required float roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion_Gyro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float yaw = 1;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->yaw(), target);
  }
  
  // required float pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }
  
  // required float roll = 3;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion_Gyro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float yaw = 1;
    if (has_yaw()) {
      total_size += 1 + 4;
    }
    
    // required float pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 4;
    }
    
    // required float roll = 3;
    if (has_roll()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion_Gyro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion_Gyro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion_Gyro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion_Gyro::MergeFrom(const Motion_Gyro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion_Gyro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_Gyro::CopyFrom(const Motion_Gyro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_Gyro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Motion_Gyro::Swap(Motion_Gyro* other) {
  if (other != this) {
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion_Gyro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_Gyro_descriptor_;
  metadata.reflection = Motion_Gyro_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Motion_WiimoteSimple_Entry::kTFieldNumber;
const int Motion_WiimoteSimple_Entry::kAccelFieldNumber;
const int Motion_WiimoteSimple_Entry::kGyroFieldNumber;
const int Motion_WiimoteSimple_Entry::kOrienFieldNumber;
#endif  // !_MSC_VER

Motion_WiimoteSimple_Entry::Motion_WiimoteSimple_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion_WiimoteSimple_Entry::InitAsDefaultInstance() {
  accel_ = const_cast< ::pb::Motion_Accel*>(&::pb::Motion_Accel::default_instance());
  gyro_ = const_cast< ::pb::Motion_Gyro*>(&::pb::Motion_Gyro::default_instance());
  orien_ = const_cast< ::pb::Motion_Gyro*>(&::pb::Motion_Gyro::default_instance());
}

Motion_WiimoteSimple_Entry::Motion_WiimoteSimple_Entry(const Motion_WiimoteSimple_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion_WiimoteSimple_Entry::SharedCtor() {
  _cached_size_ = 0;
  t_ = 0;
  accel_ = NULL;
  gyro_ = NULL;
  orien_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion_WiimoteSimple_Entry::~Motion_WiimoteSimple_Entry() {
  SharedDtor();
}

void Motion_WiimoteSimple_Entry::SharedDtor() {
  if (this != default_instance_) {
    delete accel_;
    delete gyro_;
    delete orien_;
  }
}

void Motion_WiimoteSimple_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion_WiimoteSimple_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_WiimoteSimple_Entry_descriptor_;
}

const Motion_WiimoteSimple_Entry& Motion_WiimoteSimple_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();  return *default_instance_;
}

Motion_WiimoteSimple_Entry* Motion_WiimoteSimple_Entry::default_instance_ = NULL;

Motion_WiimoteSimple_Entry* Motion_WiimoteSimple_Entry::New() const {
  return new Motion_WiimoteSimple_Entry;
}

void Motion_WiimoteSimple_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ = 0;
    if (has_accel()) {
      if (accel_ != NULL) accel_->::pb::Motion_Accel::Clear();
    }
    if (has_gyro()) {
      if (gyro_ != NULL) gyro_->::pb::Motion_Gyro::Clear();
    }
    if (has_orien()) {
      if (orien_ != NULL) orien_->::pb::Motion_Gyro::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion_WiimoteSimple_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 t = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accel;
        break;
      }
      
      // required .pb.Motion.Accel accel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gyro;
        break;
      }
      
      // required .pb.Motion.Gyro gyro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_orien;
        break;
      }
      
      // required .pb.Motion.Gyro orien = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orien:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orien()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion_WiimoteSimple_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 t = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->t(), output);
  }
  
  // required .pb.Motion.Accel accel = 2;
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accel(), output);
  }
  
  // required .pb.Motion.Gyro gyro = 3;
  if (has_gyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gyro(), output);
  }
  
  // required .pb.Motion.Gyro orien = 4;
  if (has_orien()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->orien(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion_WiimoteSimple_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 t = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->t(), target);
  }
  
  // required .pb.Motion.Accel accel = 2;
  if (has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accel(), target);
  }
  
  // required .pb.Motion.Gyro gyro = 3;
  if (has_gyro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gyro(), target);
  }
  
  // required .pb.Motion.Gyro orien = 4;
  if (has_orien()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->orien(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion_WiimoteSimple_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 t = 1;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }
    
    // required .pb.Motion.Accel accel = 2;
    if (has_accel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accel());
    }
    
    // required .pb.Motion.Gyro gyro = 3;
    if (has_gyro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gyro());
    }
    
    // required .pb.Motion.Gyro orien = 4;
    if (has_orien()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orien());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion_WiimoteSimple_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion_WiimoteSimple_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion_WiimoteSimple_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion_WiimoteSimple_Entry::MergeFrom(const Motion_WiimoteSimple_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_accel()) {
      mutable_accel()->::pb::Motion_Accel::MergeFrom(from.accel());
    }
    if (from.has_gyro()) {
      mutable_gyro()->::pb::Motion_Gyro::MergeFrom(from.gyro());
    }
    if (from.has_orien()) {
      mutable_orien()->::pb::Motion_Gyro::MergeFrom(from.orien());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion_WiimoteSimple_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_WiimoteSimple_Entry::CopyFrom(const Motion_WiimoteSimple_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_WiimoteSimple_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_accel()) {
    if (!this->accel().IsInitialized()) return false;
  }
  if (has_gyro()) {
    if (!this->gyro().IsInitialized()) return false;
  }
  if (has_orien()) {
    if (!this->orien().IsInitialized()) return false;
  }
  return true;
}

void Motion_WiimoteSimple_Entry::Swap(Motion_WiimoteSimple_Entry* other) {
  if (other != this) {
    std::swap(t_, other->t_);
    std::swap(accel_, other->accel_);
    std::swap(gyro_, other->gyro_);
    std::swap(orien_, other->orien_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion_WiimoteSimple_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_WiimoteSimple_Entry_descriptor_;
  metadata.reflection = Motion_WiimoteSimple_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Motion_WiimoteSimple::kSteptFieldNumber;
const int Motion_WiimoteSimple::kMinseqFieldNumber;
const int Motion_WiimoteSimple::kMaxseqFieldNumber;
#endif  // !_MSC_VER

Motion_WiimoteSimple::Motion_WiimoteSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion_WiimoteSimple::InitAsDefaultInstance() {
}

Motion_WiimoteSimple::Motion_WiimoteSimple(const Motion_WiimoteSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion_WiimoteSimple::SharedCtor() {
  _cached_size_ = 0;
  stept_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion_WiimoteSimple::~Motion_WiimoteSimple() {
  SharedDtor();
}

void Motion_WiimoteSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Motion_WiimoteSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion_WiimoteSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_WiimoteSimple_descriptor_;
}

const Motion_WiimoteSimple& Motion_WiimoteSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();  return *default_instance_;
}

Motion_WiimoteSimple* Motion_WiimoteSimple::default_instance_ = NULL;

Motion_WiimoteSimple* Motion_WiimoteSimple::New() const {
  return new Motion_WiimoteSimple;
}

void Motion_WiimoteSimple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stept_ = 0;
  }
  minseq_.Clear();
  maxseq_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion_WiimoteSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stept_)));
          set_has_stept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_minseq;
        break;
      }
      
      // repeated .pb.Motion.WiimoteSimple.Entry minseq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_minseq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_minseq;
        if (input->ExpectTag(26)) goto parse_maxseq;
        break;
      }
      
      // repeated .pb.Motion.WiimoteSimple.Entry maxseq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maxseq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_maxseq;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion_WiimoteSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stept = 1;
  if (has_stept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stept(), output);
  }
  
  // repeated .pb.Motion.WiimoteSimple.Entry minseq = 2;
  for (int i = 0; i < this->minseq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->minseq(i), output);
  }
  
  // repeated .pb.Motion.WiimoteSimple.Entry maxseq = 3;
  for (int i = 0; i < this->maxseq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->maxseq(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion_WiimoteSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stept = 1;
  if (has_stept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stept(), target);
  }
  
  // repeated .pb.Motion.WiimoteSimple.Entry minseq = 2;
  for (int i = 0; i < this->minseq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->minseq(i), target);
  }
  
  // repeated .pb.Motion.WiimoteSimple.Entry maxseq = 3;
  for (int i = 0; i < this->maxseq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->maxseq(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion_WiimoteSimple::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stept = 1;
    if (has_stept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stept());
    }
    
  }
  // repeated .pb.Motion.WiimoteSimple.Entry minseq = 2;
  total_size += 1 * this->minseq_size();
  for (int i = 0; i < this->minseq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->minseq(i));
  }
  
  // repeated .pb.Motion.WiimoteSimple.Entry maxseq = 3;
  total_size += 1 * this->maxseq_size();
  for (int i = 0; i < this->maxseq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maxseq(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion_WiimoteSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion_WiimoteSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion_WiimoteSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion_WiimoteSimple::MergeFrom(const Motion_WiimoteSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  minseq_.MergeFrom(from.minseq_);
  maxseq_.MergeFrom(from.maxseq_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stept()) {
      set_stept(from.stept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion_WiimoteSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_WiimoteSimple::CopyFrom(const Motion_WiimoteSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_WiimoteSimple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < minseq_size(); i++) {
    if (!this->minseq(i).IsInitialized()) return false;
  }
  for (int i = 0; i < maxseq_size(); i++) {
    if (!this->maxseq(i).IsInitialized()) return false;
  }
  return true;
}

void Motion_WiimoteSimple::Swap(Motion_WiimoteSimple* other) {
  if (other != this) {
    std::swap(stept_, other->stept_);
    minseq_.Swap(&other->minseq_);
    maxseq_.Swap(&other->maxseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion_WiimoteSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_WiimoteSimple_descriptor_;
  metadata.reflection = Motion_WiimoteSimple_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Motion::kDurationFieldNumber;
const int Motion::kWiimoteSimpleFieldNumber;
#endif  // !_MSC_VER

Motion::Motion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Motion::InitAsDefaultInstance() {
  wiimote_simple_ = const_cast< ::pb::Motion_WiimoteSimple*>(&::pb::Motion_WiimoteSimple::default_instance());
}

Motion::Motion(const Motion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Motion::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  wiimote_simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Motion::~Motion() {
  SharedDtor();
}

void Motion::SharedDtor() {
  if (this != default_instance_) {
    delete wiimote_simple_;
  }
}

void Motion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Motion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Motion_descriptor_;
}

const Motion& Motion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bootes_2fdances_2fproto_2fMotion_2eproto();  return *default_instance_;
}

Motion* Motion::default_instance_ = NULL;

Motion* Motion::New() const {
  return new Motion;
}

void Motion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    if (has_wiimote_simple()) {
      if (wiimote_simple_ != NULL) wiimote_simple_->::pb::Motion_WiimoteSimple::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Motion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_wiimote_simple;
        break;
      }
      
      // optional .pb.Motion.WiimoteSimple wiimote_simple = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wiimote_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wiimote_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Motion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }
  
  // optional .pb.Motion.WiimoteSimple wiimote_simple = 100;
  if (has_wiimote_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->wiimote_simple(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Motion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }
  
  // optional .pb.Motion.WiimoteSimple wiimote_simple = 100;
  if (has_wiimote_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->wiimote_simple(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Motion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }
    
    // optional .pb.Motion.WiimoteSimple wiimote_simple = 100;
    if (has_wiimote_simple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wiimote_simple());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Motion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Motion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Motion::MergeFrom(const Motion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_wiimote_simple()) {
      mutable_wiimote_simple()->::pb::Motion_WiimoteSimple::MergeFrom(from.wiimote_simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Motion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion::CopyFrom(const Motion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_wiimote_simple()) {
    if (!this->wiimote_simple().IsInitialized()) return false;
  }
  return true;
}

void Motion::Swap(Motion* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(wiimote_simple_, other->wiimote_simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Motion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Motion_descriptor_;
  metadata.reflection = Motion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
